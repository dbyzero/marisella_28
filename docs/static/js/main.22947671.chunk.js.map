{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["colors","label","color","search","App","draw","image","canvas","document","getElementById","centerX","width","centerY","height","radius","Math","min","ctx","getContext","clearRect","font","textAlign","forEach","idx","context","nbrPart","part","PI","fillStyle","strokeStyle","beginPath","moveTo","arc","fill","closePath","stroke","drawPart","length","save","translate","console","log","rotate","drawImage","parseInt","restore","drawImages","useState","processGoing","setProcessGoing","result","setResult","resultSearch","setResultSearch","useEffect","Image","onload","this","src","className","icon","faAngleDoubleDown","onClick","style","transitionDuration","transform","webkitTransitionDuration","webkitTransform","clearTimeout","slideAngle","random","setTimeout","slide","floor","id","window","open","faMapMarkerAlt","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.22947671.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAngleDoubleDown, faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\n\nconst colors = [{\n    label: 'Fast Food',\n    color: '#FFFFFF',\n    search: 'fast+food'\n}, {\n    label: 'Burgers',\n    color: '#FFFFFF',\n    search: 'burger'\n}, {\n    label: 'Pizza',\n    color: '#FFFFFF',\n    search: 'pizzeria'\n}, {\n    label: 'Asiatique',\n    color: '#FFFFFF',\n    search: 'asian+restaurant'\n}, {\n    label: 'Sushis',\n    color: '#FFFFFF',\n    search: 'sushi'\n}, {\n    label: 'Halal',\n    color: '#FFFFFF',\n    search: 'halal+restaurant'\n}, {\n    label: 'Healthy',\n    color: '#FFFFFF',\n    search: 'healthy+food'\n}, {\n    label: 'Poke',\n    color: '#FFFFFF',\n    search: 'pokeball'\n}, {\n    label: 'Italienne',\n    color: '#FFFFFF',\n    search: 'italian+restaurant'\n}, {\n    label: 'Francaise',\n    color: '#FFFFFF',\n    search: 'french-restaurant'\n}, {\n    label: 'Boulangerie',\n    color: '#FFFFFF',\n    search: 'bakery'\n}, {\n    label: 'Americaine',\n    color: '#FFFFFF',\n    search: 'american+restaurant'\n}, {\n    label: 'Street Food',\n    color: '#FFFFFF',\n    search: 'street+food'\n}];\n\nconst App = () => {\n    const drawPart = function(context, color, nbrPart, idx, centerX, centerY, radius) {\n        var part = 2 * Math.PI / nbrPart;\n        context.fillStyle = color;\n        context.fillStyle = \"#FFFFFF\";\n        context.strokeStyle = \"#000000\";\n        context.beginPath();\n        context.moveTo(centerX, centerY);\n        context.arc(centerX, centerY, radius, idx * part, (idx + 1) * part);\n        context.fill();\n        context.closePath();\n        context.stroke();\n    }\n\n    const drawImages= function(context, image, nbrPart, idx, centerX, centerY, radius) {\n        var part = 2 * Math.PI / nbrPart;\n        context.save();\n        context.translate(centerX,centerY);\n        console.log(part * idx + part/2);\n        context.rotate(part * idx + part / 2);\n        context.drawImage(image, 0, parseInt(idx) * 96, 56, 96, 90, -48, 56, 96);\n        context.restore();\n    }\n\n    const go = () => {\n        var canvas = document.getElementById(\"wheelCanvas\");\n        canvas.style.transitionDuration = \"0s\";\n        canvas.style.transform = \"rotate(0deg)\";\n        canvas.style.webkitTransitionDuration = \"0s\";\n        canvas.style.webkitTransform = \"rotate(0deg)\";\n        if(processGoing) {\n            clearTimeout(processGoing);\n        }\n        const slideAngle = 360 / colors.length;\n        const random = parseInt(Math.random() * 360);\n        setProcessGoing(setTimeout(function(){\n            canvas.style.transitionDuration = \"4s\";\n            canvas.style.transform = \"rotate(\"+(3600 - 90 + random) + \"deg)\";\n        },0));\n        setTimeout(() => {\n            const slide = colors.length - 1 - Math.floor(random / slideAngle);\n            setResult(colors[slide].label);\n            setResultSearch(colors[slide].search);\n        }, 4000);\n    }\n\n    const draw = (image) => {\n        var canvas = document.getElementById(\"wheelCanvas\");\n        var centerX = canvas.width / 2;\n        var centerY = canvas.height / 2;\n        var radius = Math.min(centerX, centerY);\n        var ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0,0,canvas.width,canvas.height);\n        ctx.font = \"20px monospace\";\n        ctx.textAlign = \"left\";\n        colors.forEach(function(color, idx) {\n            drawPart(ctx, color.color || '#777777', colors.length, idx, centerX, centerY, radius);\n        });\n        ctx.fillStyle = \"#000000\";\n        ctx.strokeStyle = \"#000000\";\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY);\n        ctx.arc(centerX, centerY, radius, 0*Math.PI, 2*Math.PI);\n        ctx.stroke();\n        colors.forEach(function(color, idx) {\n            // drawLabels(ctx, color.label || idx, colors.length, idx, centerX, centerY, radius);\n            drawImages(ctx, image, colors.length, idx, centerX, centerY, radius);\n        });\n    }\n\n    const [processGoing, setProcessGoing] = useState(null);\n    const [result, setResult] = useState(\"-\");\n    const [resultSearch, setResultSearch] = useState(null);\n    useEffect(() => {\n        const image = new Image(96, 90); // Using optional size for image\n        image.onload = function() {\n            draw(this);\n        }; // Draw when image has loaded\n\n        // Load an image of intrinsic size 300x227 in CSS pixels\n        image.src = '/icons.png';\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <div className=\"title\">\n                Marisella's Food Finder\n            </div>\n            <div className=\"wheel\">\n                <FontAwesomeIcon icon={faAngleDoubleDown} />\n                <canvas onClick={go} id=\"wheelCanvas\" width=\"300\" height=\"300\"></canvas>\n            </div>\n            <div className=\"result\">\n                {result}\n            </div>\n            <div className=\"actions\">\n                <button onClick={() => {\n                    if (resultSearch) {\n                        window.open(`https://www.google.com/maps/search/${resultSearch}`)\n                    }\n                }}>\n                    <FontAwesomeIcon icon={faMapMarkerAlt}/> Find around me\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n// serviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}